<footer>

</footer>

<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mixitup/3.3.1/mixitup.min.js"></script>
<script type="text/javascript">
  // To keep our code clean and modular, all custom functionality will be contained inside a single object literal called "checkboxFilter".


  // In this example, we must bind a 'change' event handler to
  // our checkboxes, then interact with the mixer via
  // its .filter() API methods.

  var containerEl = document.querySelector('.container');
  var checkboxGroup = document.querySelector('.checkbox-group');
  var checkboxes = checkboxGroup.querySelectorAll('input[type="checkbox"]');
  var inputSearch = document.querySelector('[data-ref="input-search"]');

  // set variables for filtering by based on content of cards in the toolkit
  var sortArray = document.querySelectorAll('.toolcard .cardtitle');
  var keyupTimeout;

  // create variable based on text in card, add it to
  // current value of custom attribute 'data-content' for each card
  // to be searched below by filterByString function
  sortArray.forEach(function(elem) {
    var sortText = elem.innerText || elem.innerContent;
    var sortTextLower = sortText.toLowerCase().trim();
    var sortTextHigher = elem.parentElement.parentElement.getAttribute('data-content')
    var combinedText = sortTextLower + " " + sortTextHigher
    // var sortClass = elem.parentElement.parentElement.className;
    // var classAppend = sortClass.toLowerCase().trim();
    // elem.parentElement.parentElement.setAttribute('data-content', sortTextLower + " " + classAppend);
    elem.parentElement.parentElement.setAttribute('data-content', combinedText);
  });



  var mixer = mixitup(containerEl, {
    animation: {
      duration: 350
    },
    callbacks: {
      onMixClick: function() {
        // Reset the search if a filter is clicked

        if (this.matches('[data-filter]')) {
          inputSearch.value = '';
        }
      }
    }
  });

  checkboxGroup.addEventListener('change', function() {
    var selectors = [];

    // Iterate through all checkboxes, pushing the
    // values of those that are checked into an array

    for (var i = 0; i < checkboxes.length; i++) {
      var checkbox = checkboxes[i];

      if (checkbox.checked) selectors.push(checkbox.value);
    }

    // If there are values in the array, join it into a string
    // using your desired logic, and send to the mixer's .filter()
    // method, otherwise filter by 'all'

    var selectorString = selectors.length > 0 ?
      selectors.join('') : // or '.' for AND logic
      'all';

    mixer.filter(selectorString);
  });

  // Set up a handler to listen for "keyup" events from the search input

  inputSearch.addEventListener('keyup', function() {
    var searchValue;

    if (inputSearch.value.length < 3) {
      // If the input value is less than 3 characters, don't send

      searchValue = '';
    } else {
      searchValue = inputSearch.value.toLowerCase().trim();
    }

    // Very basic throttling to prevent mixer thrashing. Only search
    // once 350ms has passed since the last keyup event

    clearTimeout(keyupTimeout);

    keyupTimeout = setTimeout(function() {
      filterByString(searchValue);
    }, 150);
  });

  /**
   * Filters the mixer using a provided search string, which is matched against
   * the contents of each target's "class" attribute. Any custom data-attribute(s)
   * could also be used.
   *
   * @param  {string} searchValue
   * @return {void}
   */

  function filterByString(searchValue) {
    if (searchValue) {
      // Use an attribute wildcard selector to check for matches

      // mixer.filter('[class*="' + searchValue + '"]');
      mixer.filter('[data-content*="' + searchValue + '"]');
    } else {
      // If no searchValue, treat as filter('all')

      mixer.filter('all');
    }
  }
  // Reset mixitup filters on close of bootstrap model
  $('#exampleModalLong').on('hidden.bs.modal', function() {
    // do somethingâ€¦
    mixer.filter('all');
  })
</script>
</body>

</html>
